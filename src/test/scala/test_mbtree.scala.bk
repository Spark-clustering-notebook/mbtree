package mbtree

import org.scalatest.FunSuite

class TestMBTree extends FunSuite {
  import ML._

  val a1 = L2Vector(1.0, 0.0)
  val a2 = L2Vector(10.0, 10.0)
  val a3 = L2Vector(10.0, 11.0)
  val a4 = L2Vector(0.0, 0.0)
  val a5 = L2Vector(2.0, 0.0)

  test("test assigning points to centroids") { 
    val (cluster_0, cluster_1) = TwoMeansAssignToCentroids(a1, a2, List(a1, a2, a3, a4, a5))

    assert(cluster_0.size === 3)
    assert(cluster_0.contains(a1))
    assert(cluster_0.contains(a4))
    assert(cluster_0.contains(a5))

    assert(cluster_1.size === 2)
    assert(cluster_1.contains(a2))
    assert(cluster_1.contains(a3))
  }

  test("find the centroid") { 
    val centroid = FindCentroidWithError(List(a5, a1, a4))._1
    assert(centroid === a1)
  }

  test("find the centroid of one point") { 
    assert(FindCentroidWithError(List(a2))._1 === a2)
  }

  test("find the centroid of a repeated point") { 
    assert(FindCentroidWithError(List(a1, a1))._1 === a1)
  }

  test("make sure can have a mix of repeated and unique points") { 
    val centroid = FindCentroidWithError(List(a1, a2, a3, a3, a3, a3, a3, a3, a3, a3, a3, a3, a3, a3))._1
    assert(centroid === a3)
  }

  test("test 2 means") { 
    val (c1, c2) = TwoMeansSeeded(a1, a2, List(a1, a2, a3, a4, a5))
    val m1 = c1.members
    val m2 = c2.members

    assert(m1.size === 3)
    assert(m1.contains(a1))
    assert(m1.contains(a4))
    assert(m1.contains(a5))

    assert(m2.size === 2)
    assert(m2.contains(a2))
    assert(m2.contains(a3))
  }
}
